{"version":3,"sources":["Video/ProgressBar/ProgressBar.js","Video/VideoComponent.js","App.js","serviceWorker.js","index.js","Video/big_buck_bunny.mp4"],"names":["ProgressBar","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","cursorTime","progressBarWidth","setTime","bind","assertThisInitialized","inherits","createClass","key","value","evt","setState","Math","round","target","onSelectTime","maxWidth","barStyle","width","react_default","a","createElement","className","type","min","max","style","onChange","timer","React","Component","VideoComponent","played","duration","currentTime","handlePlayPause","getCurrentTime","getDuration","selectTime","refs","vidRef","pause","play","currentPos","playStyle","color","playButton","pauseButton","ref","onTimeUpdate","onLoadedMetadata","height","src","source","onClick","ProgressBar_ProgressBar","progress","App","VideoComponent_VideoComponent","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.0f2e3e06.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { ETIME } from \"constants\";\r\n\r\nexport class ProgressBar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      cursorTime: 0,\r\n      progressBarWidth: 0\r\n    };\r\n\r\n    this.setTime = this.setTime.bind(this);\r\n  }\r\n\r\n  //   componentWillReceiveProps() {\r\n  //     this.setState({ progressBarWidth: this.props.progress });\r\n  //   }\r\n\r\n  setTime(evt) {\r\n    this.setState({\r\n      progressBarWidth: Math.round(evt.target.value)\r\n    });\r\n\r\n    this.props.onSelectTime(Math.round(evt.target.value));\r\n  }\r\n\r\n  render() {\r\n    const maxWidth = this.props.maxWidth;\r\n    const barStyle = {\r\n      width: maxWidth * 10\r\n    };\r\n\r\n    return (\r\n      <div className=\"bar col-md-10\">\r\n        <input\r\n          type=\"range\"\r\n          min=\"0\"\r\n          max={maxWidth}\r\n          style={barStyle}\r\n          onChange={this.setTime}\r\n        />\r\n        {this.props.timer}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport source from \"./big_buck_bunny.mp4\";\r\nimport { ProgressBar } from \"./ProgressBar/ProgressBar\";\r\n\r\nexport class VideoComponent extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      played: false,\r\n      duration: 0,\r\n      currentTime: 0\r\n    };\r\n\r\n    this.handlePlayPause = this.handlePlayPause.bind(this);\r\n    this.getCurrentTime = this.getCurrentTime.bind(this);\r\n    this.getDuration = this.getDuration.bind(this);\r\n    this.selectTime = this.selectTime.bind(this);\r\n  }\r\n\r\n  handlePlayPause() {\r\n    this.setState({\r\n      played: !this.state.played\r\n    });\r\n\r\n    this.state.played ? this.refs.vidRef.pause() : this.refs.vidRef.play();\r\n  }\r\n\r\n  getCurrentTime(evt) {\r\n    this.setState({\r\n      currentTime: Math.round(evt.target.currentTime)\r\n    });\r\n  }\r\n\r\n  getDuration(evt) {\r\n    this.setState({\r\n      duration: Math.round(evt.target.duration)\r\n    });\r\n  }\r\n\r\n  selectTime(currentPos) {\r\n    this.setState({\r\n      currentTime: currentPos\r\n    });\r\n    this.refs.vidRef.currentTime = currentPos;\r\n  }\r\n\r\n  render() {\r\n    const playStyle = { color: \"purple\" };\r\n    const playButton = (\r\n      <i className=\"fas fa-play-circle fa-4x\" style={playStyle} />\r\n    );\r\n    const pauseButton = (\r\n      <i className=\"fas fa-pause-circle fa-4x\" style={playStyle} />\r\n    );\r\n    return (\r\n      <div className=\"container\" style={{ maxWidth: \"800px\", width: \"100\" }}>\r\n        <div className=\"row\">\r\n          <video\r\n            ref=\"vidRef\"\r\n            onTimeUpdate={this.getCurrentTime}\r\n            onLoadedMetadata={this.getDuration}\r\n            width={800}\r\n            height={600}\r\n          >\r\n            <source src={source} type=\"video/mp4\" />\r\n          </video>\r\n        </div>\r\n        <div className=\"controls row\">\r\n          <div className=\"col-md-2\">\r\n            <button onClick={this.handlePlayPause}>\r\n              {this.state.played ? pauseButton : playButton}\r\n            </button>\r\n          </div>\r\n          <ProgressBar\r\n            maxWidth={this.state.duration}\r\n            progress={this.state.currentTime}\r\n            onSelectTime={this.selectTime}\r\n            timer={\r\n              <p>\r\n                {this.state.currentTime} : {this.state.duration} s\r\n              </p>\r\n            }\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport { VideoComponent } from \"./Video/VideoComponent\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Simple Video Player</h1>\r\n      <VideoComponent />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/big_buck_bunny.f13004ee.mp4\";"],"sourceRoot":""}